{
    "summary": "The code creates a server that accepts GET and POST requests, storing data in time-stamped files with recursive directory creation. It operates on port 5000 and responds accordingly to valid or undefined requests.",
    "details": [
        {
            "comment": "Creates a server that handles GET and POST requests, writing received data to files using recursive directory creation if needed. Uses monotonic timestamp for file names. Previous data is stored in the 'prev' variable.",
            "location": "\"/media/root/Prima/works/generated_docs/autoup_doc/src/collector/chrome_receive.js\":0-30",
            "content": "var http = require('http');\nconst fs = require(\"fs\");\nconst chrome_html = \"/chrome_html\";\nconst chrome_monitor = \"/chrome_monitor\";\nvar monotonic_html=0;\nvar monotonic_monitor=0;\n//logger=require('html-differ/lib/logger')\n//this is too slow.\n//you can use some other abstract syntax. such as monotonic+timestamp.\nconst writeFileRecursive = function(path, buffer, callback){\n    let lastPath = path.substring(0, path.lastIndexOf(\"/\"));\n    fs.mkdir(lastPath, {recursive: true}, (err) => {\n        if (err) return callback(err);\n        fs.writeFile(path, buffer, function(err){\n            if (err) return callback(err);\n            return callback(null);\n        });\n    });\n}\nvar prev=null;\n    var server = http.createServer ( function(request,response){\n    response.writeHead(200,{\"Content-Type\":\"text/plain\"});\n    if(request.method == \"GET\")\n        {\n            response.end(\"received GET request.\")\n        }\n    else if(request.method == \"POST\")\n        {//console.log(request.data);\n\t\tvar body=[]\n\t\trequest.on('data', function(data) {"
        },
        {
            "comment": "This code is creating a partial body by pushing data into an array, and once the 'end' event is triggered for the request, it concatenates the body, checks the URL, and writes the file recursively. If the URL matches chrome_html, it increments monotonic_html, otherwise if the URL matches chrome_monitor, it increments monotonic_monitor. Finally, it logs the length of the concatenated body and sends a 200 response with a text/html Content-Type.",
            "location": "\"/media/root/Prima/works/generated_docs/autoup_doc/src/collector/chrome_receive.js\":31-48",
            "content": "      body.push(data)\n      //console.log('Partial body: ' , data)\n    })\n    request.on('end', function() {\n\t    var concatBody=Buffer.concat(body)\n\t    if (request.url == chrome_html){\n\t\t    monotonic_html+=1;\n\t    var next=concatBody.toString('utf-8')\n\t    writeFileRecursive(\"./chrome_html/\"+Date.now()+\"-\"+monotonic_html+\".html\",next,error => {if (error) return console.log(\"error to write file.\\n\"+error.message); console.log(\"saved successfully\");});}\n\t    else if (request.url == chrome_monitor){\nmonotonic_monitor+=1;\n\t    var next=concatBody.toString('utf-8')\n\t    writeFileRecursive(\"./chrome_monitor/\"+Date.now()+\"-\"+monotonic_monitor+\".json\",next,error => {if (error) return console.log(\"error to write file.\\n\"+error.message); console.log(\"saved successfully\");});}\n\t    // why are you doing it?\n\t    // we are going to save the file, in case that you are dumb.\n      console.log('Body From '+request.url+'\\nLength:',concatBody.length)\n      response.writeHead(200, {'Content-Type': 'text/html'})\n\t    // this is not."
        },
        {
            "comment": "This code sets up a server on port 5000, and handles POST requests. If a valid request is received, it sends \"post received\" response. Otherwise, it responds with \"Undefined request.\" The socket port should be changed to avoid conflicts with other ports.",
            "location": "\"/media/root/Prima/works/generated_docs/autoup_doc/src/collector/chrome_receive.js\":49-60",
            "content": "      response.end('post received')\n    })\n        }\n    else\n        {\n            response.end(\"Undefined request .\");\n        }\n});\n//arbitrary path.\nserver.listen(5000);\nconsole.log(\"Server running on port 5000\");\n// the socket port might need some change. do not use the same port?"
        }
    ]
}