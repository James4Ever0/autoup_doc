{
    "summary": "The code tests Audacity pipe functionality, sets up pipe names based on OS, opens reading/writing pipes and includes a test with example commands.",
    "details": [
        {
            "comment": "This code tests the Audacity pipe by checking if the 'To' and 'From' pipes exist, ensuring Audacity is running with mod-script-pipe enabled. It sets up the pipe names based on operating system (Windows or Linux/macOS), and checks if the pipes are accessible.",
            "location": "\"/media/root/Prima/works/generated_docs/autoup_doc/src/generator/singing/piped_test.py\":0-34",
            "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"Tests the audacity pipe.\nKeep pipe_test.py short!!\nYou can make more complicated longer tests to test other functionality\nor to generate screenshots etc in other scripts.\nMake sure Audacity is running first and that mod-script-pipe is enabled\nbefore running this script.\nRequires Python 2.7 or later. Python 3 is strongly recommended.\n\"\"\"\nimport os\nimport sys\nif sys.platform == 'win32':\n    print(\"pipe-test.py, running on windows\")\n    TONAME = '\\\\\\\\.\\\\pipe\\\\ToSrvPipe'\n    FROMNAME = '\\\\\\\\.\\\\pipe\\\\FromSrvPipe'\n    EOL = '\\r\\n\\0'\nelse:\n    print(\"pipe-test.py, running on linux or mac\")\n    TONAME = '/tmp/audacity_script_pipe.to.' + str(os.getuid())\n    FROMNAME = '/tmp/audacity_script_pipe.from.' + str(os.getuid())\n    EOL = '\\n'\nprint(\"Write to  \\\"\" + TONAME +\"\\\"\")\nif not os.path.exists(TONAME):\n    print(\" ..does not exist.  Ensure Audacity is running with mod-script-pipe.\")\n    sys.exit()\nprint(\"Read from \\\"\" + FROMNAME +\"\\\"\")\nif not os.path.exists(FROMNAME):\n    print(\" ..does not exist.  Ensure Audacity is running with mod-script-pipe.\")"
        },
        {
            "comment": "The code opens two pipes, one for writing commands and the other for reading responses. It defines functions to send a single command and get the response, and includes a quick test with some example commands.",
            "location": "\"/media/root/Prima/works/generated_docs/autoup_doc/src/generator/singing/piped_test.py\":35-75",
            "content": "    sys.exit()\nprint(\"-- Both pipes exist.  Good.\")\nTOFILE = open(TONAME, 'w')\nprint(\"-- File to write to has been opened\")\nFROMFILE = open(FROMNAME, 'rt')\nprint(\"-- File to read from has now been opened too\\r\\n\")\ndef send_command(command):\n    \"\"\"Send a single command.\"\"\"\n    print(\"Send: >>> \\n\"+command)\n    TOFILE.write(command + EOL)\n    TOFILE.flush()\ndef get_response():\n    \"\"\"Return the command response.\"\"\"\n    result = ''\n    line = ''\n    while True:\n        result += line\n        line = FROMFILE.readline()\n        if line == '\\n' and len(result) > 0:\n            break\n    return result\ndef do_command(command):\n    \"\"\"Send one command, and return the response.\"\"\"\n    send_command(command)\n    response = get_response()\n    print(\"Rcvd: <<< \\n\" + response)\n    return response\ndef quick_test():\n    \"\"\"Example list of commands.\"\"\"\n    do_command('Help: Command=Help')\n    do_command('Help: Command=\"GetInfo\"')\n    #do_command('SetPreference: Name=GUI/Theme Value=classic Reload=1')\nquick_test()"
        }
    ]
}